<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://danilobarion1986.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://danilobarion1986.github.io/" rel="alternate" type="text/html" /><updated>2019-04-28T20:44:26-03:00</updated><id>http://danilobarion1986.github.io/feed.xml</id><title type="html">{{ Developer Notes }}</title><subtitle>Devaneios de um desenvolvedor em construção.</subtitle><entry><title type="html">Ruby Pills: Dynamic Method Inclusion</title><link href="http://danilobarion1986.github.io/ruby/backend/pills/tips/2019/04/29/ruby-pills-dynamic-method-inclusion.html" rel="alternate" type="text/html" title="Ruby Pills: Dynamic Method Inclusion" /><published>2019-04-29T11:01:42-03:00</published><updated>2019-04-29T11:01:42-03:00</updated><id>http://danilobarion1986.github.io/ruby/backend/pills/tips/2019/04/29/ruby-pills-dynamic-method-inclusion</id><content type="html" xml:base="http://danilobarion1986.github.io/ruby/backend/pills/tips/2019/04/29/ruby-pills-dynamic-method-inclusion.html">&lt;p&gt;&lt;img src=&quot;/assets/img/ruby_pills.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ruby-metaprogramming&quot;&gt;Ruby Metaprogramming&lt;/h2&gt;

&lt;p&gt;Ruby is an amazing programming language in many aspects, specially regarding metaprogramming! The fact that everything is an object, give to programmer the ability to manipulate methods and closures, the inheritance chain classes, callbacks, have modules with common code, and a lot of other nice things!&lt;/p&gt;

&lt;p&gt;In this Ruby Pill I’ll cover 3 module callbacks (&lt;code class=&quot;highlighter-rouge&quot;&gt;included&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;extended&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;method_added&lt;/code&gt;), to dynamically add methods to a class.&lt;/p&gt;

&lt;h2 id=&quot;some-module-callbacks&quot;&gt;Some Module Callbacks&lt;/h2&gt;

&lt;p&gt;Let’s take a module with the 3 callbacks that we’ll are using:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Example&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method_added&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Despite the descriptive names, follows a summary of each method:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;included(base)&lt;/em&gt;: executed after you &lt;em&gt;include&lt;/em&gt; the module. If you add some method here, it will be an &lt;strong&gt;instance&lt;/strong&gt; method of your class.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;extended(base)&lt;/em&gt;: executed after you &lt;em&gt;extend&lt;/em&gt; the module. If you add some method here, it will be a &lt;strong&gt;class&lt;/strong&gt; method of your class.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;In both cases, &lt;em&gt;base&lt;/em&gt; refers to the class where you include/extend the module.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;method_added(method_name)&lt;/em&gt;: Here you can put the code to be executed after you’ve been added a method in your class.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;adding-methods-dinamically&quot;&gt;Adding Methods Dinamically&lt;/h2&gt;

&lt;p&gt;Here is our module with its callbacks and implementations:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Example&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_new_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_new_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method_added&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Adding &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_new_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_new_method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Method added in &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; class =&amp;gt; Value passed: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The magic is inside our &lt;code class=&quot;highlighter-rouge&quot;&gt;add_new_method&lt;/code&gt; private method. It’s called inside &lt;code class=&quot;highlighter-rouge&quot;&gt;included&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;extended&lt;/code&gt; callbacks, passing the &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; variable, that is our class. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;define_method&lt;/code&gt; method, we add a new method called &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;CLASS_NAME&amp;gt;_new_method&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To see them in action, we could use it like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wow&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Example&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Wow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wow_new_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:wow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Adding :wow_new_method&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Method added in Wow class =&amp;gt; Value passed: :wow&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cool&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Example&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cool_new_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Adding :cool_new_method&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Method added in Cool class =&amp;gt; Value passed: :cool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool! Besides add new instance/class methods to our classes, we can see the message of the &lt;code class=&quot;highlighter-rouge&quot;&gt;method_added&lt;/code&gt; callback after each one is added!&lt;/p&gt;

&lt;h2 id=&quot;final-thougths&quot;&gt;Final Thougths&lt;/h2&gt;

&lt;p&gt;This only scratchs some of Ruby capabilities! There’s a world of possibilities, methods and callbacks to use if you want to take a deep dive on Ruby metaprogramming!&lt;/p&gt;

&lt;p&gt;One thing that you should be aware of is that how much more you use this kind of Ruby features, your code can become too slow, so be careful!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Did you like this post? Did you already know about these module callbacks?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you have any comments, suggestions or critics, post a comment below!&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Ruby Pills: Hash Fetch and Performance</title><link href="http://danilobarion1986.github.io/ruby/backend/pills/tips/2019/04/15/ruby-pills-hash-fetch.html" rel="alternate" type="text/html" title="Ruby Pills: Hash Fetch and Performance" /><published>2019-04-15T13:24:08-03:00</published><updated>2019-04-15T13:24:08-03:00</updated><id>http://danilobarion1986.github.io/ruby/backend/pills/tips/2019/04/15/ruby-pills-hash-fetch</id><content type="html" xml:base="http://danilobarion1986.github.io/ruby/backend/pills/tips/2019/04/15/ruby-pills-hash-fetch.html">&lt;p&gt;&lt;img src=&quot;/assets/img/ruby_pills.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ruby-hash&quot;&gt;Ruby Hash&lt;/h2&gt;

&lt;p&gt;The Hash class is widely used in Ruby code, due to its key/value structure. It have many interesting methods, aside from most basic ones, like &lt;code class=&quot;highlighter-rouge&quot;&gt;#default&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;#key?&lt;/code&gt;, used to return a default value if the desired key was not found and verify if some key exists, respectively. There are accessor methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;#[]&lt;/code&gt;, that return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; if the key don’t exists, and &lt;code class=&quot;highlighter-rouge&quot;&gt;#fetch&lt;/code&gt; that you raise an error instead.&lt;/p&gt;

&lt;p&gt;However some methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;#fetch&lt;/code&gt; have different arities:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;with 1 argument and a block, being the code evaluated inside the block the default value.&lt;/li&gt;
  &lt;li&gt;with 2 arguments, being the first one the key that you want to find the value, and the second a default value when that key don’t exists.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;b: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Both forms will return the default value, as the key don't exists&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;trickier-fetch-behaviour&quot;&gt;Trickier &lt;code class=&quot;highlighter-rouge&quot;&gt;#fetch&lt;/code&gt; Behaviour&lt;/h2&gt;

&lt;p&gt;As you saw both forms of calling &lt;code class=&quot;highlighter-rouge&quot;&gt;#fetch&lt;/code&gt; have the same result, but is the difference only of style and preference of each developer? No! There’s a subtle difference, that most times won’t make any difference in your application performance. But, let’s see an example to understand the impact of a wrong choice:&lt;/p&gt;

&lt;p&gt;Imagine that you have an intensive operation to do, if you don’t find a key in your Hash:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;my_intensive_computation&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;my_key: :ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;my_intensive_computation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# after 5 seconds you'll get... =&amp;gt; :ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oh, did you see what just happened?! Even with the key present in your hash, Ruby evaluated the default value, that is your intensive computation method!&lt;/p&gt;

&lt;p&gt;Now if you use the block way:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;my_key: :ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;my_intensive_computation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# instantly get... =&amp;gt; :ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;final-thougths&quot;&gt;Final Thougths&lt;/h2&gt;

&lt;p&gt;Some methods in Ruby may receive a block as last argument, and even return the same result when you pass a block to it. But some methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash#fetch&lt;/code&gt; can have trickier behaviour when used with or without passing a block, that could have an important impact on your application.&lt;/p&gt;

&lt;p&gt;Be aware of different behaviour of each form and write the code accordingly with your needs!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Did you like this post? Did you already know about this behaviour of Hash#fetch?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you have any comments, suggestions or critics, post a comment below!&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Architecture and Tools Decision: Rails + React = BFF</title><link href="http://danilobarion1986.github.io/ruby/backend/architecture/rails/react/bff/tools/2018/12/03/architecture-and-tools-decision-rails-react-bff.html" rel="alternate" type="text/html" title="Architecture and Tools Decision: Rails + React = BFF" /><published>2018-12-03T15:38:31-02:00</published><updated>2018-12-03T15:38:31-02:00</updated><id>http://danilobarion1986.github.io/ruby/backend/architecture/rails/react/bff/tools/2018/12/03/architecture-and-tools-decision-rails-react-bff</id><content type="html" xml:base="http://danilobarion1986.github.io/ruby/backend/architecture/rails/react/bff/tools/2018/12/03/architecture-and-tools-decision-rails-react-bff.html">&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/CV1R95wU4AA4lBs.png&quot; alt=&quot;bff-diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we began to modernize our &lt;a href=&quot;https://epartner.vagas.com.br/_AcessoEmpr.asp?tc=471&quot;&gt;company’s main software&lt;/a&gt;, we need to choose an architecture that could be as stable as it was for the last 20 years and at the same time, allow us to use one of the best alternatives to build an highly interactive and complex front-end.&lt;/p&gt;

&lt;p&gt;So, to embrace the innovation while keeping an solid foundation, we decided to work with our main web framework Rails, with the React  front-end, an amazing feature of one of Rails more recent versions.&lt;/p&gt;

&lt;p&gt;The Ruby (and Rails) are our main programming language + framework for about 6 years to modernize our almost 20 years old legacy system. We already have a lot of interesting tools working together, like MongoDB, Redis, RabbitMQ, PostgreSQL, etc. All of them with fantastic libraries/support for Ruby.&lt;/p&gt;

&lt;p&gt;Besides that, our front-end team is growing fast, and wants to apply what they’ve been learning (in theory and practice) everyday with React.&lt;/p&gt;

&lt;h2 id=&quot;mixing-everything&quot;&gt;Mixing everything!&lt;/h2&gt;

&lt;p&gt;With all of this in mind, our decision was not so difficulty, because Rails recently brings a pretty decent support to use some of the modern Javascript frameworks (react, angular, vuejs) as a front to an web-app.&lt;/p&gt;

&lt;p&gt;But we don’t want it to become a new monster after some months, when we passed the mainly features of our app to this new project, so we think: How we could use this new features? Which are the architecture that most adapt to our needs?&lt;/p&gt;

&lt;p&gt;We thought about GraphQL, but we don’t want to rewrite all our main API’s at the beginning of the process of rewrite our already big legacy system (Maybe GraphQL could be another “decision post” in the future…)&lt;/p&gt;

&lt;p&gt;After some research, we listen about a pattern that is emerging, mainly in microservices world, that is called “Backend For Frontends” (or BFF for short).&lt;/p&gt;

&lt;h2 id=&quot;final-decision-bff-to-the-rescue&quot;&gt;Final decision: BFF to the rescue!&lt;/h2&gt;

&lt;p&gt;This option shows up in one of the ThoughtWorks’ technology radar, and you could read deeper articles &lt;a href=&quot;https://samnewman.io/patterns/architectural/bff/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://nordicapis.com/building-a-backend-for-frontend-shim-for-your-microservices/&quot;&gt;here&lt;/a&gt;. The BFF is an attempt to bring a backend support for each kind of client that is consuming our services. Its main goal is to decoupling the APIs/microservices from their consumers.&lt;/p&gt;

&lt;p&gt;Basically, what we do is include one more layer (the BFF) between our APIs and an frontend client, attending the its individual needs. For example, let’s say that our mobile app be simpler than our web-app, and in the list of customer’s items don’t show all details about each one of them.&lt;/p&gt;

&lt;p&gt;These backends should (ideally) be developed by teams aligned with each frontend to ensure that each backend properly meets the needs of its client.&lt;/p&gt;

&lt;p&gt;If we request the information for the same API route for both, the mobile app will receive all the data, as the web-app, but will discard most of it, consuming mobile bandwidth with useless information. To solve this problem, we can develop two BFF’s, reading the same API route, one returning everything and other returning only the few information that will be used by the mobile client.&lt;/p&gt;

&lt;h2 id=&quot;final-thougths&quot;&gt;Final Thougths&lt;/h2&gt;

&lt;p&gt;Sure that it’s a contrived example, but when you need to call three, four, five or even more routes to render one page and all its options, each call that brings only the strict necessary will save you and your customers bandwidth, less work to frontend to join all that info, since the BFF already did it.&lt;/p&gt;

&lt;p&gt;Besides that, maybe you can apply some rules authorization/authentication/business rules, giving to frontend just the information about possible errors, unauthorized requests or links to more features accessed by that page/customer.&lt;/p&gt;

&lt;p&gt;As the possibilities are so numerous, I strongly recommend that you read both of the articles cited above, to understand even more of this pattern and judge if its adapt to the needs of your company.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Did you like this post? Did you already used this architectural pattern in some of your companies app? What are the challenges that you faced? What’s the best/worst part of this pattern? Do you have any comments, suggestions or critics?&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Dia (Quase Mundial) do Rock!</title><link href="http://danilobarion1986.github.io/off-topic/music/rock/2018/07/13/rock-and-roll-day.html" rel="alternate" type="text/html" title="Dia (Quase Mundial) do Rock!" /><published>2018-07-13T00:25:00-03:00</published><updated>2018-07-13T00:25:00-03:00</updated><id>http://danilobarion1986.github.io/off-topic/music/rock/2018/07/13/rock-and-roll-day</id><content type="html" xml:base="http://danilobarion1986.github.io/off-topic/music/rock/2018/07/13/rock-and-roll-day.html">&lt;p&gt;♪♫ &lt;em&gt;Flyyyyy! On your waaaaay! Like an  eagle! Fly as hiiiiigh, aaaaaas the suuuun!&lt;/em&gt; ♪♫&lt;/p&gt;

&lt;p&gt;Hoje é dia do Rock! Estive pensando como desde pequeno meu gosto foi sendo definido por este estilo! Mesmo atualmente, apesar de ser muito eclético, a influência do Rock é gigante em minha vida musical :)&lt;/p&gt;

&lt;p&gt;Neste dia, 13 de Julho, no ano de 1985 (um antes de eu nascer!), aconteceu o festival &lt;em&gt;Live Aid&lt;/em&gt;, em Londres e na Filadélfia. Na época, Phil Collins declarou aquele como o “Dia do Rock”. Mas parece que essa data não é tão mundial assim.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nem os americanos nem os ingleses levaram a sério. Só brasileiros e as rádios rock do Brasil, desde aquela época, passaram a considerar esse o Dia do Rock - Kid Vinil&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sem mais delongas, decidi fazer uma lista com 13 de alguns dos álbuns de Rock/Heavy Metal/Hard Rock que mais me marcaram! Foi difícil e com certeza muita coisa ficou de fora, mas vamos lá!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Machine Head (Deep Purple, 1972)&lt;/th&gt;
      &lt;th&gt;Mob Rules (Black Sabbath, 1981)&lt;/th&gt;
      &lt;th&gt;Holy Diver (Dio, 1983)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/32NQ56VZDTXSH3SMv4XSGN?si=kgo57BqyRIq_maMr5jPHgQ&quot;&gt;&lt;img src=&quot;https://i.pinimg.com/originals/6b/07/7b/6b077b363839ed009df78404afed9589.jpg&quot; alt=&quot;Machine Head&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/2iaECLD2YLSEOkSfi7BRaC?si=BD_ptJfITGGQmLgZyP77iA&quot;&gt;&lt;img src=&quot;https://cps-static.rovicorp.com/3/JPG_250/MI0004/176/MI0004176831.jpg?partner=allrovi.com&quot; alt=&quot;Mob Rules&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/1QJmLRcuIMMjZ49elafR3K?si=gG686WPURUyZmSNYUF5zmA&quot;&gt;&lt;img src=&quot;https://cps-static.rovicorp.com/3/JPG_250/MI0003/515/MI0003515838.jpg?partner=allrovi.com&quot; alt=&quot;Holy Diver&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;The Chemical Wedding (Bruce Dickinson, 1998)&lt;/th&gt;
      &lt;th&gt;Greatest Hits (Queen, 1981)&lt;/th&gt;
      &lt;th&gt;Sonoridades (Mauro Hector, 2002)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/5T8Pm2DRJVYFVGY0by8ucQ?si=UaPxLjD7Q4CR9fTnWjLeHA&quot;&gt;&lt;img src=&quot;https://studiosol-a.akamaihd.net/letras/250x250/albuns/d/1/4/1/25031433156525.jpg&quot; alt=&quot;Chemical Wedding&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/3VWrUk4vBznMYXGMPc7dRB?si=FHaZ5GulSF-Hz2bnG_RA4A&quot;&gt;&lt;img src=&quot;https://s2.vagalume.com/queen/images/93454w250.jpg&quot; alt=&quot;Greatest Hits&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vIFKOdjaD98&quot;&gt;&lt;img src=&quot;https://www.freenote.com.br/cd/MHCD001.jpg&quot; alt=&quot;Sonoridades&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Kill’em All (Metallica, 1982)&lt;/th&gt;
      &lt;th&gt;Subhuman Race (Skid Row, 1995)&lt;/th&gt;
      &lt;th&gt;Eat’em And Smile (David Lee Roth, 1986)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/3m69LQokz6DaKB3yw4BH6n?si=Fn_351unTPetP6XFbF7LbA&quot;&gt;&lt;img src=&quot;http://images1.folha.com.br/livraria/images/1/d/1352554-350x360.png&quot; alt=&quot;Kill'em All&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/0E6teVyhy2HlUds8vLpjRG?si=3psUEoaFQ0Sg-VjctCeIVg&quot;&gt;&lt;img src=&quot;https://www.chordie.com/photos/album_3e6d90ec-db2f-3dc5-9e14-2d55f0ea8e40.jpg&quot; alt=&quot;Subhuman Race&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/0Ali88C44gQdI065upsgKU?si=jKX-PpEDSAmwnWnu9HM-hw&quot;&gt;&lt;img src=&quot;https://cps-static.rovicorp.com/3/JPG_250/MI0003/515/MI0003515872.jpg?partner=allrovi.com&quot; alt=&quot;Eat'em And Smile&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Outrider (Jimmy Page, 1988)&lt;/th&gt;
      &lt;th&gt;Made In Heaven (Queen, 1995)&lt;/th&gt;
      &lt;th&gt;Alien Love Secrets (Steve Vai, 1995)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/1rnsDYMbmgByfGNq49VWRy?si=MtpZRSiwRbyxoSG75zfPXg&quot;&gt;&lt;img src=&quot;https://d19cna3yr6weg2.cloudfront.net/alb/09ec21454d1d4892c1dd7e13660854ac.jpg&quot; alt=&quot;Outrider&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/391ScNR3xKywWSpfDwP3n0?si=PLhJGj_mReSqLbx_xbjLxQ&quot;&gt;&lt;img src=&quot;https://target.scene7.com/is/image/Target/50102562?wid=250&amp;amp;hei=250&amp;amp;qlt=80&amp;amp;fmt=pjpeg&quot; alt=&quot;Made In Heaven&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/1cBOYvZOaWzfNH2kfykjIe?si=-I_l_rEATou_SB_Sr5iESQ&quot;&gt;&lt;img src=&quot;https://http2.mlstatic.com/cd-steve-vai-alien-love-secret-importado-D_NQ_NP_14160-MLB4322034803_052013-F.jpg&quot; alt=&quot;Alien Love Secrets&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;The Yngwie Malmsteen Collection (Yngwie Malmsteen, 1992)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://open.spotify.com/album/4S2kyFPZheSFR1m1IJ0Hzc?si=NI2dxLXyTvyXO8y8Fc62Rg&quot;&gt;&lt;img src=&quot;https://cps-static.rovicorp.com/3/JPG_250/MI0000/027/MI0000027752.jpg?partner=allrovi.com&quot; alt=&quot;The Yngwie Malmsteen Collection&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;O Mauro Hector é um guitarrista de Santos, muuuuito gente boa, e na minha humilde opinião, só um dos &lt;strong&gt;maiores guitarristas do mundo! :)&lt;/strong&gt; Vale a pena conhecer seu trabalho, ele tem muitos vídeos no YouTube. Melhor ainda se puder ver sua agenda e ir em algum show!&lt;/li&gt;
  &lt;li&gt;O Jimmy Page deste álbum é mais “raiz” no blues do que no Led Zepellin, e mostra muitas outras faces, que a capa do álbum inclusive sugere ;) Além disso, tem 2 músicas com o vocal maravilhoso do Chris Farlowe (ex-Atomic Rooster, outra banda que vale conhecer, principalmente se você gosta de Rock Progressivo).&lt;/li&gt;
  &lt;li&gt;O &lt;em&gt;The Chemical Wedding&lt;/em&gt; também mostra um Brce Dickinson bem diferente do Iron Maiden (e pra mim muito melhor…rs). As músicas são bem pesadas e os solos primorosos! É um álbum conceitual, com grande parte das letras inspiradas pelos escritos do poeta inglês William Blake, com uma temática bem sombria e mágica.&lt;/li&gt;
  &lt;li&gt;O Dio, a Voz do Heavy Metal, aparece tanto no seu incrível &lt;em&gt;Holy Diver&lt;/em&gt;, quanto no Sabbath, que pra mim tem sua melhor fase com ele. Sem mais comentários, &lt;strong&gt;apenas ouça!&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;O David Lee Roth (também do Van Halen), mostra toda sua loucura, digo, seu talento nestas músicas, que tem cada uma seu mundo próprio tanto na letra quanto no estilo. Inclusive conta com o Steve Vai (beeem novinho) na guitarra, já quebrando tudo!&lt;/li&gt;
  &lt;li&gt;Não sei se reparou, mas o Queen é o único que aparece 2 vezes! Isso porque estas músicas todas me influenciaram demais e pra mim o Queen é a &lt;strong&gt;melhor banda de Rock do mundo&lt;/strong&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ufa, se eu fosse comentar cada uma destas pérolas, teria que fazer um &lt;em&gt;post&lt;/em&gt; pra cada, então estes foram só alguns comentários mais essenciais!&lt;/p&gt;

&lt;p&gt;E aí o que achou desta seleção? Demais né!?haha
Comenta aí com aqueles que você colocaria ou tiraria desta lista!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Long live Rock And Roll! ♪♫\o/♪♫&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">♪♫ Flyyyyy! On your waaaaay! Like an eagle! Fly as hiiiiigh, aaaaaas the suuuun! ♪♫</summary></entry><entry><title type="html">Desenvolvendo em C# no Linux com .NET Core (Parte 1)</title><link href="http://danilobarion1986.github.io/c%23/csharp/backend/dotnetcore/2018/07/11/desenvolvendo-em-csharp-no-linux-com-dotnet-core.html" rel="alternate" type="text/html" title="Desenvolvendo em C# no Linux com .NET Core (Parte 1)" /><published>2018-07-11T22:45:43-03:00</published><updated>2018-07-11T22:45:43-03:00</updated><id>http://danilobarion1986.github.io/c%23/csharp/backend/dotnetcore/2018/07/11/desenvolvendo-em-csharp-no-linux-com-dotnet-core</id><content type="html" xml:base="http://danilobarion1986.github.io/c%23/csharp/backend/dotnetcore/2018/07/11/desenvolvendo-em-csharp-no-linux-com-dotnet-core.html">&lt;p&gt;A Microsoft tem cada vez mais declarado seu amor pelo Linux e abraçado o Open Source! Porque não juntar então estes 2 mundos utilizando o (relativamente) recente framework .NET Core lançado pela MS para construir e rodar aplicações C# no Linux?!&lt;/p&gt;

&lt;p&gt;Nesta sequência de posts vou explorar um pouco este universo, começando do básico mesmo! Portanto, como primeira ação você precisa instalar o .NET Core SDK em seu ambiente local:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/net/download/linux&quot;&gt;.NET Core Download&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clique no botão &lt;em&gt;Install .NET Core 2.1 SDK&lt;/em&gt; (versão v2.1.300 no momento da escrita deste artigo). Selecione sua distribuição Linux e execute os comandos próprios que serão exibidos nesta mesma página. Eu utilizei a distribuição Ubuntu 18.04. sendo necessário baixar aproximadamente 377 MB em arquivos para o uso do SDK completo.&lt;/p&gt;

&lt;p&gt;Após a instalação, você terá à disposição o comando &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet&lt;/code&gt;, que é o seu CLI para uso do .NET Core.  Se rodar o comando dotnet –help verá uma lista dos principais comandos e opções globais do SDK.&lt;/p&gt;

&lt;p&gt;A própria documentação da Microsoft ensina a criar seu 1º programa com a ferramenta, onde você terá uma amostra da estrutura básica de um projeto C#.&lt;/p&gt;

&lt;p&gt;Com um simples &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet new console&lt;/code&gt; você terá um projeto do tipo &lt;em&gt;Console&lt;/em&gt; , que ao ser executado escreve &lt;em&gt;Hello World!&lt;/em&gt; no terminal e finaliza.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nas versões 1.x era necessário executar &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet restore&lt;/code&gt; para geração dos arquivos binários e demais objetos necessários do projeto. Porém, a partir da versão 2.x o restore é executado logo após a criação do projeto, como você poderá ver no em seu terminal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A partir deste ponto, é possível simplesmente seguir o fluxo normal que você já está acostumado, ir criando suas classes, namespaces, testes, e o que mais for necessário! Ao alterar o projeto, basta rodar ele novamente com &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet run&lt;/code&gt; que as alterações serão recompiladas e já executadas. Se precisar incluir algum pacote para trazer funcionalidades de outros projetos, será necessário rodar o comando &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet restore&lt;/code&gt; antes, para que os arquivos de dependências sejam atualizados corretamente.&lt;/p&gt;

&lt;p&gt;Esse foi só um pequeno “cheiro” para despertar sua curiosidade e ver como está bem mais simples desenvolver com C# no Linux, que nos abre um mundo de possibilidades, pensando não somente no uso profissional mas também no educativo!&lt;/p&gt;

&lt;p&gt;Fique de olho na parte 2, onde vamos criar algo mais interessante e personalizado! ;)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;E você, já conhecia o .NET Core? Estava frustrado por não poder unir a programação C# com o Linux? Ou não acha que haja tanto amor envolvido assim por parte da Microsoft?!&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">A Microsoft tem cada vez mais declarado seu amor pelo Linux e abraçado o Open Source! Porque não juntar então estes 2 mundos utilizando o (relativamente) recente framework .NET Core lançado pela MS para construir e rodar aplicações C# no Linux?!</summary></entry><entry><title type="html">Extracting Lambda Source Code</title><link href="http://danilobarion1986.github.io/ruby/backend/2017/10/09/extracting-lambda-source-code.html" rel="alternate" type="text/html" title="Extracting Lambda Source Code" /><published>2017-10-09T19:08:58-03:00</published><updated>2017-10-09T19:08:58-03:00</updated><id>http://danilobarion1986.github.io/ruby/backend/2017/10/09/extracting-lambda-source-code</id><content type="html" xml:base="http://danilobarion1986.github.io/ruby/backend/2017/10/09/extracting-lambda-source-code.html">&lt;p&gt;&lt;img src=&quot;https://devdanilo.files.wordpress.com/2017/10/source-code.jpeg&quot; alt=&quot;source-code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this post, I’ll show you how to extract the code definition of a Lambda object, using just pure Ruby! But, first things first! What is a lambda in Ruby? A lambda is an special type of Proc, with some little differences in syntax, behavior and functionality, one of them that could be used as an anonymous function. There are many articles with all the details of what a lambda is and its main differences from a Proc and a block, one of them is &lt;a href=&quot;http://culttt.com/2015/05/13/what-are-lambdas-in-ruby.&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At one of my side-projects, I wanted to extract the definition of one property of my class, that is a lambda defined by the user, and make a little markdown documentation page with this code on it. Then I thought: “Well, Ruby must have some special method call to do this… Or maybe the object itself (lambda) has an to_s like method that returns its own definition…”. But, well, for my surprise it was not so simple…&lt;/p&gt;

&lt;h2 id=&quot;trying-some-code&quot;&gt;Trying some code…&lt;/h2&gt;

&lt;p&gt;Then, I googled a little bit, and found some gems that works, but honestly, it’s a so tiny part of my project that I don’t wanted to add an entire extra-project just to extract source code from an lambda object… Besides this, my goal is to make a gem that don’t have third-party dependencies at all… Then, after some reading, coding, testing, refactoring, this was my result:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f413a13ccd090f802600ee8bbc0e23ca.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;It’s a simple class, with one public method (lambda2source), that receives the lambda object and returns its source code as string. If the passed parameter it’s not an lambda, it raises an ArgumentError exception, with an informative message. Else, it checks what syntax was used to define the lambda (matching one of the two possibilities). This return is already the source code that I want to use.&lt;/p&gt;

&lt;h2 id=&quot;cons&quot;&gt;Cons&lt;/h2&gt;

&lt;p&gt;With this approach, I could easily retrieve the code that I want, without using any third-party code/gem get this functionality in my project. Even though is a simple solution, we have some limitations like, for example, it’s not possible to extract the source code of lambdas defined at runtime. But, for my needs it’s enough.
So, I have a solution that is simple and I don’t need to worry with some dependency that might break one of the main features that I want to provide, that is auto-generated documentation!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Did you like this post? Are you careful about add third-party code to your applications too? Have any comments, suggestions or critics?&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Código Sobre Código Sobre Código…</title><link href="http://danilobarion1986.github.io/c%23/csharp/backend/metaprogramming/xml/2017/04/07/codigo-sobre-codigo-sobre-codigo.html" rel="alternate" type="text/html" title="Código Sobre Código Sobre Código..." /><published>2017-04-07T21:24:12-03:00</published><updated>2017-04-07T21:24:12-03:00</updated><id>http://danilobarion1986.github.io/c%23/csharp/backend/metaprogramming/xml/2017/04/07/codigo-sobre-codigo-sobre-codigo</id><content type="html" xml:base="http://danilobarion1986.github.io/c%23/csharp/backend/metaprogramming/xml/2017/04/07/codigo-sobre-codigo-sobre-codigo.html">&lt;p&gt;&lt;img src=&quot;https://i2.wp.com/devdanilo.files.wordpress.com/2017/04/thematrixincode99.jpg&quot; alt=&quot;source-code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Olá pessoal! Andei um pouco (muito) sumido, mas não esqueci do blog não!&lt;/p&gt;

&lt;p&gt;Desde o último post decidi que escreveria o próximo sobre algo mais técnico. Só não conseguia escolher dentre as infinitas possibilidades! Mas afinal pensei: “Esquece o perfeccionismo e escreve logo!”. Então lá vai!&lt;/p&gt;

&lt;h2 id=&quot;contextualizando&quot;&gt;Contextualizando&lt;/h2&gt;

&lt;p&gt;Recentemente, precisei desenvolver uma funcionalidade para corrigir um problema tenso de integração entre 2 sistemas. O processo anterior acontecia por meio de tabelas intermediárias e &lt;em&gt;jobs&lt;/em&gt; no banco de dados que as populavam, para que o sistema destino pudesse (por meio de outro &lt;em&gt;job&lt;/em&gt;) gravar as informações nas tabelas finais! Era um processo que apesar de muito sujeito a erros, até que funcionava bem, já estava há um certo tempo em produção.&lt;/p&gt;

&lt;p&gt;Porém, ao começar a existir alguns códigos internos divergentes entre os dois, muitos erros passaram a acontecer, inclusive no processo de vendas, que geralmente sempre geram um grande impacto, afinal “&lt;em&gt;Time is Money&lt;/em&gt;”!&lt;/p&gt;

&lt;h2 id=&quot;solução-e-novo-desafio&quot;&gt;Solução e Novo Desafio&lt;/h2&gt;

&lt;p&gt;Para resolver o problema, após diversas análises e sugestões, chegamos à única solução possível: alterar toda a lógica da integração e todos os processos relacionados, substituir as tabelas temporárias e &lt;em&gt;jobs&lt;/em&gt; por chamadas ao &lt;em&gt;WebService&lt;/em&gt; do sistema destino, utilizando também o código deste como “chave-primária” (que antes era gerada na origem).&lt;/p&gt;

&lt;p&gt;Não posso descrever os detalhes do processo em si, mas em resumo, para esta solução funcionar, eu teria que montar um XML com todos os dados que seriam gravados, pois era o único parâmetro recebido pelo &lt;em&gt;WebService&lt;/em&gt;. Em parte, o trabalho de criação do objeto que seria enviado e suas muuuitas propriedades (inclusive sendo algumas delas outros objetos) já estava codificado. Porém, surgiu um novo probleminha: no parâmetro a ser enviado, os campos que não estivessem preenchidos (por exemplo, o campo Complemento em um endereço) não poderiam nem fazer parte do XML.&lt;/p&gt;

&lt;p&gt;Depois de um tempo montando diversos &lt;em&gt;if&lt;/em&gt;‘&lt;em&gt;s&lt;/em&gt; para verificar se cada uma das propriedades tinha valor e, caso tivesse, montando o elemento XML “na mão” e com &lt;em&gt;strings hard-coded&lt;/em&gt;, parei e refleti um pouco mais… “Vou usar &lt;em&gt;Reflection&lt;/em&gt;!”.&lt;/p&gt;

&lt;h2 id=&quot;refletindo-sobre-o-código&quot;&gt;Refletindo Sobre o Código&lt;/h2&gt;

&lt;p&gt;A meta-programação sempre me chamou muito a atenção. Já havia usado um pouco em outros projetos, mas quando encarei este problema de montar um XML dinâmico, vi uma oportunidade de usar ainda mais.&lt;/p&gt;

&lt;p&gt;Então comecei a desenvolver, desde o mais genérico e prático, até alguns detalhes que foram surgindo para lidar com casos específicos ou mesmo opções para tornar a geração ainda mais flexível. O esqueleto da classe e método foi esse:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/9c90830a9668d50eab82a9961fa7cedf.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Portanto, ao receber qualquer objeto, que no caso seriam minhas classes já existentes, eu iria retornar uma &lt;em&gt;string&lt;/em&gt;, que seria o XML dinâmico. Basicamente, teria que obter os nomes das propriedades, escrevendo aquelas que tivesse algum valor no formato de um elemento XML, ou seja, &lt;em&gt;Valor da propriedade&lt;/em&gt;. Então, como percorrer as propriedades?&lt;/p&gt;

&lt;p&gt;Assim:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/514e8cb6af2e70d849dea593f0119034.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Agora sim as coisas estão ficando mais interessantes! :)&lt;/p&gt;

&lt;p&gt;Toda a “mágica” começa na linha 5, onde obtemos qual é o tipo do objeto recebido, e com isso todas as informações daquela classe e suas propriedades! Mas para isso precisamos complementar nosso código inserindo o &lt;em&gt;using&lt;/em&gt; do &lt;em&gt;namespace&lt;/em&gt; &lt;em&gt;System.Reflection&lt;/em&gt;, que nos permitirá percorrer estas propriedades e usar outros métodos (linha 7 e seguintes).&lt;/p&gt;

&lt;p&gt;Os detalhes de cada propriedade ficam contidas na classe &lt;em&gt;PropertyInfo&lt;/em&gt;, que usamos dentro do &lt;em&gt;foreach&lt;/em&gt;, e que nos permitirão obter seu nome e valor.&lt;/p&gt;

&lt;p&gt;Na linha 9, verificamos se a propriedade pode ser lida (ou seja, se possui um método &lt;em&gt;get&lt;/em&gt; acessível). Caso tenha, obtemos seu nome na linha 9, pela propriedade &lt;em&gt;Name&lt;/em&gt;. Também já criamos a variável &lt;em&gt;tagValue&lt;/em&gt; do tipo &lt;em&gt;dynamic&lt;/em&gt;, que armazenará o valor da propriedade atual, independente de seu tipo.&lt;/p&gt;

&lt;p&gt;Bem, a solução final tem mais alguns detalhes bem interessantes, que compartilharei no próximo(s) post(s)! Estou também preparando os arquivos com a solução completa para compartilhar no &lt;em&gt;GitHub&lt;/em&gt;, vamos ver quando sai do forno!&lt;/p&gt;

&lt;p&gt;Enquanto isso, comente o que achou até aqui! Você já usou &lt;em&gt;Reflection&lt;/em&gt;? Como? Faria algo diferente do que eu fiz?&lt;/p&gt;

&lt;p&gt;Compartilha aí! ;)&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Organizando a Bagunça (parte 2)</title><link href="http://danilobarion1986.github.io/produtividade/opini%C3%A3o/2016/02/16/organizando-a-bagunca-parte-2.html" rel="alternate" type="text/html" title="Organizando a Bagunça (parte 2)" /><published>2016-02-16T12:53:35-02:00</published><updated>2016-02-16T12:53:35-02:00</updated><id>http://danilobarion1986.github.io/produtividade/opini%C3%A3o/2016/02/16/organizando-a-bagunca-parte-2</id><content type="html" xml:base="http://danilobarion1986.github.io/produtividade/opini%C3%A3o/2016/02/16/organizando-a-bagunca-parte-2.html">&lt;p&gt;Olá pessoal! Este é o 2º post da “minissérie” que iniciei &lt;a href=&quot;/produtividade/opinião/2015/12/30/organizando-a-bagunca-parte-1.html&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hoje falarei sobre &lt;strong&gt;Mapas Mentais&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Como o nome já diz, eles têm como objetivo tornar visível as ideias, metas e temas, aparentemente desorganizadas, que ficam circulando em nossas cabeças, nos permitindo ver as &lt;strong&gt;relações entre elas&lt;/strong&gt;. Além disso, outras tarefas e assuntos interligados, que ainda não tínhamos vislumbrado, sem dúvida virão à tona durante a elaboração dos mapas.&lt;/p&gt;

&lt;p&gt;Como disse no post anterior, sou muito fã de listas. Vejo o Mapa Mental como uma espécie de lista, mas com a vantagem de &lt;strong&gt;mostrar rapidamente&lt;/strong&gt; as interligações entre as coisas, algo que nas listas pode ficar um pouco menos aparente, dependendo do seu poder de classificação. Além disso, é uma ferramenta &lt;strong&gt;mais livre e flexível&lt;/strong&gt;, que pode ser mais intuitiva para aqueles com um lado mais artístico, pois permite qualquer tipo de desenho, imagem, fluxograma, e o que mais for necessário para representar suas ideias.&lt;/p&gt;

&lt;p&gt;Inclusive, este recurso não precisa ser usado apenas profissionalmente ou para estudo. Na época que estava correndo com os &lt;strong&gt;preparativos de meu casamento&lt;/strong&gt;, por exemplo, precisei fazer um mapa mental e garanto que, caso contrário, muita coisa teria escapado ou passado do prazo, tornando esta fase muito mais estressante!&lt;/p&gt;

&lt;p&gt;Existem diversos softwares e apps que possibilitam criar mapas mentais, como a &lt;a href=&quot;https://www.mindmeister.com&quot;&gt;MindMeister&lt;/a&gt;, mas para &lt;strong&gt;atividades criativas&lt;/strong&gt; (que o mapa não deixa de ser) confesso que prefiro e recomendo a você que faça na mão mesmo! Por vários motivos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Facilidade de fazer &lt;strong&gt;pequenos desenhos&lt;/strong&gt;, que sejam representativos;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Liberdade&lt;/strong&gt; no formato dos balões e ligações entre as ideias/tarefas;&lt;/li&gt;
  &lt;li&gt;Processo de escrita manual é &lt;strong&gt;mais estimulante para o cérebro&lt;/strong&gt;, ajudando a lembrar dos pontos importantes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;De preferência, utilize uma folha bem grande (para ideias complexas) ou pequenas fichas (para questões pontuais). Além disso, &lt;strong&gt;utilize cores&lt;/strong&gt;, elas com certeza tem um grande impacto na elaboração do mapa e também na memorização (quando necessário!). Você encontra diversos exemplos pela internet, veja alguns que achei interessantes (deste site &lt;a href=&quot;http://www.mind-mapping.co.uk&quot;&gt;aqui&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://devdanilo.files.wordpress.com/2016/02/mybigmindmap-2000x0.jpg&quot; alt=&quot;MyBigMindMap-2000x0&quot; /&gt; &lt;img src=&quot;https://devdanilo.files.wordpress.com/2016/02/about-illumine_illumine-2000x0.jpg&quot; alt=&quot;About-Illumine_illumine-2000x0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;E aí, o que achou sobre a ideia de criar mapas mentais? Está afim de tentar usar em seu dia a dia? Que outras formas você utiliza para auxiliar no controle de suas tarefas? Compartilhe!&lt;/p&gt;

&lt;p&gt;Até o próximo post! :)&lt;/p&gt;</content><author><name></name></author><summary type="html">Olá pessoal! Este é o 2º post da “minissérie” que iniciei aqui.</summary></entry><entry><title type="html">Organizando a Bagunça (parte 1)</title><link href="http://danilobarion1986.github.io/produtividade/opini%C3%A3o/2015/12/30/organizando-a-bagunca-parte-1.html" rel="alternate" type="text/html" title="Organizando a Bagunça (parte 1)" /><published>2015-12-30T12:21:57-02:00</published><updated>2015-12-30T12:21:57-02:00</updated><id>http://danilobarion1986.github.io/produtividade/opini%C3%A3o/2015/12/30/organizando-a-bagunca-parte-1</id><content type="html" xml:base="http://danilobarion1986.github.io/produtividade/opini%C3%A3o/2015/12/30/organizando-a-bagunca-parte-1.html">&lt;p&gt;&lt;img src=&quot;https://devdanilo.files.wordpress.com/2015/12/organized.jpg&quot; alt=&quot;organized&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Estava indeciso quanto ao tema do novo post, mas finalmente decidi!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Organização e Produtividade!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Não sou nenhum &lt;em&gt;expert&lt;/em&gt; nestes temas, mas gosto muito do assunto, leio sobre ele e sempre busco aumentar a eficiência na realização de meus projetos pessoais e profissionais. Quero focar em duas &lt;strong&gt;questões práticas&lt;/strong&gt; sobre eles, e que possam ser usadas sem demora!&lt;/p&gt;

&lt;p&gt;Dividi o post em duas partes, nas quais irei apresentar aquelas que considero as duas melhores ferramentas para se organizar e fazer as coisas acontecerem: &lt;strong&gt;Listas&lt;/strong&gt; e &lt;strong&gt;Mapas Mentais&lt;/strong&gt;! :)&lt;/p&gt;

&lt;p&gt;Começarei falando sobre &lt;strong&gt;Listas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Já percebeu como elas atraem nossa atenção? Livros, textos e posts que usam tópicos costumam ser bastante atrativos: “Os 10 Hábitos Mais Importantes”, “Os 5 Aplicativos Mais Baixados do Ano”, “Os 15 Líderes Mais Influentes da História”, etc…&lt;/p&gt;

&lt;p&gt;Todos sabemos o que são listas, mas você talvez não tenha descoberto ainda o poder que elas podem te dar para &lt;strong&gt;resolver problemas&lt;/strong&gt; e &lt;strong&gt;finalizar tarefas&lt;/strong&gt; (ou até mesmo saber o que realmente precisa ser feito!). As listas de tarefas podem te deixar extremamente focado e isso ajuda muito na produtividade.&lt;/p&gt;

&lt;p&gt;Enfim, falei que seria prático, então vamos lá! Não perca mais tempo e comece fazendo uma conta na &lt;a href=&quot;https://www.wunderlist.com/&quot;&gt;melhor lista de todos os tempos! :)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nela você consegue criar listas, organizá-las em pastas, compartilhar, atribuir responsável de cada item, colocar data limite, lembretes, subtarefas, notas, comentários… ufa! Tudo isso com uma interface bela e intuitiva, sistema de busca e sincronização com Smartphone. Ou seja, tudo que é necessário e mais!&lt;/p&gt;

&lt;p&gt;Conheci a &lt;strong&gt;Wunderlist&lt;/strong&gt; este ano e virei fã assumido. Depois que comecei a usar, fiquei viciado, pois se não está lá, para mim praticamente não existe!&lt;/p&gt;

&lt;p&gt;Pode até parecer loucura, mas este é justamente o principal benefício das listas: saber que suas tarefas estão todas anotadas em algum lugar e que seu cérebro não precisa ficar guardando isso na memória. O que inclusive &lt;strong&gt;reduz o estresse&lt;/strong&gt; , pois se percebe que aquelas “1000 tarefas”, na verdade eram apenas 6 ou 7…&lt;/p&gt;

&lt;p&gt;Outra vantagem de usar a Wunderlist é que eu &lt;strong&gt;unifiquei todos os meus locais de anotações&lt;/strong&gt; , pois favorecem a eficiência nas tarefas, já que não é necessário ficar lembrando exatamente onde você anotou aquele item específico, quando precisar lembrar os detalhes para resolvê-lo. Locais como favoritos do navegador, listas de compras e desejos, afazeres diários, responsabilidades familiares, projetos pessoais e profissionais, links com ferramentas &lt;em&gt;online&lt;/em&gt; e textos para ler depois, entre outros, agora estão em um &lt;strong&gt;único local&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;A forma que organizei minhas listas lá foi a seguinte:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Pasta Familiar&lt;/em&gt;: listas com perguntas para o Pediatra, listas de compras, finanças, afazeres gerais e da casa, entre outras listas de assuntos pessoais;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Pasta Profissional&lt;/em&gt;: listas com tarefas dos projetos em andamento, chamados a tratar e outras com assuntos relacionados ao trabalho;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Pasta Pessoal&lt;/em&gt;: listas com sonhos, filmes para assistir, artigos para ler depois, ferramentas online, links para estudo, promessas e desejos para o novo ano, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Este formato que tenho usado é bem minimalista, provavelmente irei refazê-lo no inicio de 2016. Mas considero que a &lt;strong&gt;simplicidade&lt;/strong&gt; na organização das listas é um fator que nos permite reduzir a ansiedade das &lt;strong&gt;“tarefas rodando na cabeça”&lt;/strong&gt; , e mais felizes ao conseguir cumprir as atividades que já estão há um longo tempo para serem iniciadas e/ou concluídas.&lt;/p&gt;

&lt;p&gt;E você, utiliza listas para controlar seus afazeres? Tem outro aplicativo de listas para recomendar? Deixe seu comentário abaixo!&lt;/p&gt;

&lt;p&gt;Um abraço e bom final de ano! :)&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Framework W3.CSS</title><link href="http://danilobarion1986.github.io/web-development/front-end/frameworks/2015/12/04/framework-w3css.html" rel="alternate" type="text/html" title="Framework W3.CSS" /><published>2015-12-04T14:50:49-02:00</published><updated>2015-12-04T14:50:49-02:00</updated><id>http://danilobarion1986.github.io/web-development/front-end/frameworks/2015/12/04/framework-w3css</id><content type="html" xml:base="http://danilobarion1986.github.io/web-development/front-end/frameworks/2015/12/04/framework-w3css.html">&lt;p&gt;&lt;img src=&quot;https://devdanilo.files.wordpress.com/2015/12/responsive_design_screens.png&quot; alt=&quot;responsive_design_screens&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Com a crescente popularização do desenvolvimento &lt;em&gt;Mobile&lt;/em&gt;, muitas empresas tem desenvolvido tecnologias, linguagens e _ &lt;strong&gt;frameworks&lt;/strong&gt; _ para agilizar a criação de aplicativos e facilitar o uso destes em múltiplas plataformas (&lt;em&gt;Android&lt;/em&gt;, &lt;em&gt;iOS&lt;/em&gt; e &lt;em&gt;Windows&lt;/em&gt; &lt;em&gt;Phone&lt;/em&gt;), além do próprio acesso pelo navegador.&lt;/p&gt;

&lt;p&gt;Dentro deste mundo de possibilidades, gostaria de abordar um framework &lt;em&gt;front-end&lt;/em&gt; bastante recente (junho/2015) lançado pela &lt;a href=&quot;http://www.w3schools.com/default.asp&quot;&gt;w3Schools&lt;/a&gt;, importante site de ensino e referência sobre linguagens de desenvolvimento &lt;em&gt;Web&lt;/em&gt; que, apesar do nome, não tem relação com o &lt;a href=&quot;https://pt.wikipedia.org/wiki/W3C&quot;&gt;W3C&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Semelhante ao &lt;em&gt;Bootstrap&lt;/em&gt; em seus objetivos, que é facilitar a criação de &lt;em&gt;layouts&lt;/em&gt; e o desenvolvimento &lt;em&gt;front-end&lt;/em&gt;, ele é todo baseado na customização de elementos &lt;em&gt;HTML&lt;/em&gt; por meio de classes &lt;em&gt;CSS&lt;/em&gt; que, na minha opinião, são muito mais &lt;strong&gt;intuitivas&lt;/strong&gt; e &lt;strong&gt;simples&lt;/strong&gt; de utilizar que as do &lt;em&gt;Bootstrap&lt;/em&gt; (&lt;em&gt;let the&lt;/em&gt; “treta” &lt;em&gt;begins&lt;/em&gt;!). As classes que eles disponibilizam seguem o estilo do _ &lt;strong&gt;Material Design&lt;/strong&gt; _ do &lt;em&gt;Google&lt;/em&gt; e já possuem responsividade nativa! Ou seja, rapidamente você pode criar um layout &lt;strong&gt;bonito&lt;/strong&gt; e &lt;strong&gt;responsivo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Além disso, todas elas iniciam com “w3”, o que te permite diferenciar rapidamente das suas classes personalizadas e são MUITO legíveis e fáceis de lembrar. Mas vamos a alguns exemplos práticos! :)&lt;/p&gt;

&lt;p&gt;Primeiramente, para usar estas classes &lt;em&gt;CSS&lt;/em&gt; em seu site, basta referenciar a biblioteca disponível neste &lt;em&gt;&lt;a href=&quot;http://www.w3schools.com/lib/w3.css&quot;&gt;link&lt;/a&gt;&lt;/em&gt; da seguinte forma, entre os elementos de seu &lt;em&gt;HTML&lt;/em&gt;, como qualquer outro arquivo de estilo, usando a tag , referenciado o endereço http://www.w3schools.com/lib/w3.css.&lt;/p&gt;

&lt;p&gt;Se você não entendeu essa parte, recomendo fortemente que inicie sua leitura &lt;a href=&quot;http://www.w3schools.com/css/css_howto.asp&quot;&gt;por aqui&lt;/a&gt; e &lt;a href=&quot;http://www.w3schools.com/html/default.asp&quot;&gt;aqui&lt;/a&gt;, antes de continuar a explorar o W3.CSS!&lt;/p&gt;

&lt;p&gt;Para estilizar um checkbox, que classe você usaria? w3-check. Para cores de fundo? w3-red. Para cores de texto? w3-text-blue. Para bordas arredondadas (de qualquer elemento possível)? w3-round. &lt;strong&gt;Simples assim!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;E você o que achou do W3.CSS? Possui experiência com Bootstrap? Compartilhe nos comentários o que achou deste novo framework, se já utilizou e como o avalia em relação ao Bootstrap!&lt;/p&gt;

&lt;p&gt;Ate o próximo post!&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>